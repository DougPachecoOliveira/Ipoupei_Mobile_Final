// üîñ Teste do Sistema de Cache de Subcategorias - iPoupei Mobile
// 
// Exemplo pr√°tico de como utilizar o novo sistema de cache de subcategorias
// que espelha o sistema j√° implementado para categorias
//
// Features testadas:
// - Cache local com TTL de 5 minutos
// - Pr√©-cache dos √∫ltimos 12 meses
// - Atualiza√ß√£o autom√°tica a cada 5 minutos
// - Busca com valores pr√©-calculados
// - Fallback offline e online

import 'package:flutter/material.dart';
import '../services/categoria_service.dart';

class SubcategoriasCacheTest extends StatefulWidget {
  const SubcategoriasCacheTest({super.key});

  @override
  State<SubcategoriasCacheTest> createState() => _SubcategoriasCacheTestState();
}

class _SubcategoriasCacheTestState extends State<SubcategoriasCacheTest> {
  final _categoriaService = CategoriaService.instance;
  bool _testando = false;
  List<String> _resultados = [];
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üîñ Teste Cache Subcategorias'),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
          Text(
            'üîñ Sistema de Cache de Subcategorias',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          
          Text(
            'Este teste verifica todas as funcionalidades do cache de subcategorias:\n'
            '‚Ä¢ Cache local com TTL de 5 minutos\n'
            '‚Ä¢ Pr√©-cache dos √∫ltimos 12 meses\n'
            '‚Ä¢ Atualiza√ß√£o autom√°tica a cada 5 minutos\n'
            '‚Ä¢ Busca com valores pr√©-calculados\n'
            '‚Ä¢ Fallback offline e online',
            style: Theme.of(context).textTheme.bodyMedium,
          ),
          
          const SizedBox(height: 24),
          
          ElevatedButton(
            onPressed: _testando ? null : _executarTodosOsTestes,
            child: _testando 
                ? const Text('‚è≥ Executando Testes...')
                : const Text('üöÄ Executar Todos os Testes'),
          ),
          
          const SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: ElevatedButton(
                  onPressed: _testando ? null : _testarCacheBasico,
                  child: const Text('üìä Teste Cache B√°sico'),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: ElevatedButton(
                  onPressed: _testando ? null : _testarPreCache,
                  child: const Text('‚ö° Teste Pr√©-Cache'),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 8),
          
          Row(
            children: [
              Expanded(
                child: ElevatedButton(
                  onPressed: _testando ? null : _testarAtualizacaoAutomatica,
                  child: const Text('‚è∞ Teste Auto-Update'),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: ElevatedButton(
                  onPressed: _testando ? null : _verificarStatus,
                  child: const Text('üìä Ver Status'),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          Expanded(
            child: Card(
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üìã Resultados dos Testes:',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Expanded(
                      child: ListView.builder(
                        itemCount: _resultados.length,
                        itemBuilder: (context, index) {
                          final resultado = _resultados[index];
                          return Padding(
                            padding: const EdgeInsets.symmetric(vertical: 2.0),
                            child: Text(
                              resultado,
                              style: TextStyle(
                                fontFamily: 'monospace',
                                fontSize: 12,
                                color: resultado.contains('‚úÖ') 
                                    ? Colors.green[700]
                                    : resultado.contains('‚ùå')
                                    ? Colors.red[700]
                                    : resultado.contains('‚ö†Ô∏è')
                                    ? Colors.orange[700]
                                    : Theme.of(context).textTheme.bodySmall?.color,
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
          ],
        ),
      ),
    );
  }

  /// üöÄ EXECUTAR TODOS OS TESTES SEQUENCIALMENTE
  Future<void> _executarTodosOsTestes() async {
    setState(() {
      _testando = true;
      _resultados.clear();
    });

    _adicionarResultado('üöÄ Iniciando bateria completa de testes...');
    
    await _testarCacheBasico();
    await Future.delayed(const Duration(seconds: 1));
    
    await _testarPreCache();
    await Future.delayed(const Duration(seconds: 1));
    
    await _testarAtualizacaoAutomatica();
    await Future.delayed(const Duration(seconds: 1));
    
    await _verificarStatus();
    
    _adicionarResultado('üéØ Todos os testes conclu√≠dos!');
    
    setState(() => _testando = false);
  }

  /// üìä TESTE 1: CACHE B√ÅSICO DE SUBCATEGORIAS
  Future<void> _testarCacheBasico() async {
    _adicionarResultado('');
    _adicionarResultado('üìä === TESTE CACHE B√ÅSICO ===');
    
    try {
      final agora = DateTime.now();
      final inicioMes = DateTime(agora.year, agora.month, 1);
      final fimMes = DateTime(agora.year, agora.month + 1, 0);
      
      _adicionarResultado('üìÖ Per√≠odo de teste: ${inicioMes.day}/${inicioMes.month} a ${fimMes.day}/${fimMes.month}');
      
      // Primeira chamada - deve ir no servidor
      _adicionarResultado('‚è≥ Primeira chamada (servidor)...');
      final inicio1 = DateTime.now();
      final dadosSubcategorias1 = await _categoriaService.fetchSubcategoriasComValoresCache(
        dataInicio: inicioMes,
        dataFim: fimMes,
      );
      final tempo1 = DateTime.now().difference(inicio1).inMilliseconds;
      _adicionarResultado('‚úÖ ${dadosSubcategorias1.length} subcategorias em ${tempo1}ms');
      
      // Segunda chamada - deve vir do cache (muito mais r√°pido)
      _adicionarResultado('‚è≥ Segunda chamada (cache)...');
      final inicio2 = DateTime.now();
      final dadosSubcategorias2 = await _categoriaService.fetchSubcategoriasComValoresCache(
        dataInicio: inicioMes,
        dataFim: fimMes,
      );
      final tempo2 = DateTime.now().difference(inicio2).inMilliseconds;
      _adicionarResultado('‚ö° ${dadosSubcategorias2.length} subcategorias em ${tempo2}ms (cache)');
      
      // Verificar se o cache foi efetivo
      if (tempo2 < tempo1 * 0.5) {
        _adicionarResultado('‚úÖ Cache funcionando! ${((tempo1 - tempo2) / tempo1 * 100).toInt()}% mais r√°pido');
      } else {
        _adicionarResultado('‚ö†Ô∏è Cache pode n√£o estar funcionando corretamente');
      }
      
      // Mostrar alguns resultados
      if (dadosSubcategorias1.isNotEmpty) {
        _adicionarResultado('üìã Exemplo de subcategoria encontrada:');
        final primeira = dadosSubcategorias1.first;
        _adicionarResultado('   ‚Ä¢ Nome: ${primeira['nome']}');
        _adicionarResultado('   ‚Ä¢ Valor Total: R\$ ${primeira['valor_total']?.toStringAsFixed(2) ?? '0.00'}');
        _adicionarResultado('   ‚Ä¢ Qtd Transa√ß√µes: ${primeira['quantidade_transacoes'] ?? 0}');
      }
      
    } catch (e) {
      _adicionarResultado('‚ùå Erro no teste de cache b√°sico: $e');
    }
  }

  /// ‚ö° TESTE 2: PR√â-CACHE DOS √öLTIMOS 12 MESES
  Future<void> _testarPreCache() async {
    _adicionarResultado('');
    _adicionarResultado('‚ö° === TESTE PR√â-CACHE ===');
    
    try {
      // Testar alguns meses anteriores que devem estar no pr√©-cache
      final agora = DateTime.now();
      final mesAnterior = DateTime(agora.year, agora.month - 1, 1);
      final fimMesAnterior = DateTime(agora.year, agora.month, 0);
      
      _adicionarResultado('üìÖ Testando m√™s anterior: ${mesAnterior.month}/${mesAnterior.year}');
      
      final inicio = DateTime.now();
      final dadosPreCache = await _categoriaService.fetchSubcategoriasComValoresCache(
        dataInicio: mesAnterior,
        dataFim: fimMesAnterior,
      );
      final tempo = DateTime.now().difference(inicio).inMilliseconds;
      
      if (tempo < 100) {
        _adicionarResultado('‚ö° Pr√©-cache funcionando! ${dadosPreCache.length} subcategorias em ${tempo}ms');
      } else {
        _adicionarResultado('‚è≥ ${dadosPreCache.length} subcategorias em ${tempo}ms (pode n√£o estar em pr√©-cache)');
      }
      
      // Testar 3 meses atr√°s
      final mes3Atras = DateTime(agora.year, agora.month - 3, 1);
      final fim3Atras = DateTime(agora.year, agora.month - 2, 0);
      
      _adicionarResultado('üìÖ Testando 3 meses atr√°s: ${mes3Atras.month}/${mes3Atras.year}');
      
      final inicio2 = DateTime.now();
      final dados3Meses = await _categoriaService.fetchSubcategoriasComValoresCache(
        dataInicio: mes3Atras,
        dataFim: fim3Atras,
      );
      final tempo2 = DateTime.now().difference(inicio2).inMilliseconds;
      
      _adicionarResultado('üìä ${dados3Meses.length} subcategorias em ${tempo2}ms');
      
    } catch (e) {
      _adicionarResultado('‚ùå Erro no teste de pr√©-cache: $e');
    }
  }

  /// ‚è∞ TESTE 3: ATUALIZA√á√ÉO AUTOM√ÅTICA
  Future<void> _testarAtualizacaoAutomatica() async {
    _adicionarResultado('');
    _adicionarResultado('‚è∞ === TESTE ATUALIZA√á√ÉO AUTOM√ÅTICA ===');
    
    try {
      final status = _categoriaService.getStatusPreCache();
      
      _adicionarResultado('üìä Status da atualiza√ß√£o autom√°tica:');
      _adicionarResultado('   ‚Ä¢ Ativa: ${status['atualizacao_automatica_ativa']}');
      _adicionarResultado('   ‚Ä¢ Timer ativo: ${status['timer_ativo']}');
      
      if (status['atualizacao_automatica_ativa'] == true) {
        _adicionarResultado('‚úÖ Atualiza√ß√£o autom√°tica configurada corretamente!');
        _adicionarResultado('üìÖ Pr√≥xima atualiza√ß√£o em at√© 5 minutos');
      } else {
        _adicionarResultado('‚ö†Ô∏è Atualiza√ß√£o autom√°tica n√£o est√° ativa');
      }
      
      // Testar parar e reiniciar
      _adicionarResultado('');
      _adicionarResultado('üîÑ Testando parar/reiniciar atualiza√ß√£o autom√°tica...');
      
      _categoriaService.pararAtualizacaoAutomatica();
      await Future.delayed(const Duration(milliseconds: 100));
      
      final statusParado = _categoriaService.getStatusPreCache();
      if (statusParado['atualizacao_automatica_ativa'] == false) {
        _adicionarResultado('‚úÖ Parada da atualiza√ß√£o autom√°tica funciona!');
      }
      
      _categoriaService.iniciarAtualizacaoAutomatica();
      await Future.delayed(const Duration(milliseconds: 100));
      
      final statusReiniciado = _categoriaService.getStatusPreCache();
      if (statusReiniciado['atualizacao_automatica_ativa'] == true) {
        _adicionarResultado('‚úÖ Rein√≠cio da atualiza√ß√£o autom√°tica funciona!');
      }
      
    } catch (e) {
      _adicionarResultado('‚ùå Erro no teste de atualiza√ß√£o autom√°tica: $e');
    }
  }

  /// üìä VERIFICAR STATUS COMPLETO DO SISTEMA
  Future<void> _verificarStatus() async {
    _adicionarResultado('');
    _adicionarResultado('üìä === STATUS COMPLETO DO SISTEMA ===');
    
    try {
      final status = _categoriaService.getStatusPreCache();
      
      _adicionarResultado('üîñ Cache de Subcategorias:');
      _adicionarResultado('   ‚Ä¢ Per√≠odos carregados: ${status['subcategorias_periodos_carregados']}');
      _adicionarResultado('   ‚Ä¢ Cache normal size: ${status['subcategorias_cache_normal_size']}');
      _adicionarResultado('   ‚Ä¢ √öltimo pr√©-carregamento: ${status['subcategorias_ultimo_precarregamento']?.toString().split('.')[0] ?? 'Nunca'}');
      _adicionarResultado('   ‚Ä¢ Em andamento: ${status['subcategorias_precarregamento_em_andamento']}');
      
      _adicionarResultado('');
      _adicionarResultado('üìä Cache de Categorias:');
      _adicionarResultado('   ‚Ä¢ Per√≠odos carregados: ${status['categorias_periodos_carregados']}');
      _adicionarResultado('   ‚Ä¢ Cache normal size: ${status['categorias_cache_normal_size']}');
      
      _adicionarResultado('');
      _adicionarResultado('‚è∞ Atualiza√ß√£o Autom√°tica:');
      _adicionarResultado('   ‚Ä¢ Ativa: ${status['atualizacao_automatica_ativa']}');
      _adicionarResultado('   ‚Ä¢ Timer ativo: ${status['timer_ativo']}');
      
      _adicionarResultado('');
      _adicionarResultado('üíæ Resumo Geral:');
      _adicionarResultado('   ‚Ä¢ Total chaves cache: ${status['total_chaves_cache']}');
      _adicionarResultado('   ‚Ä¢ Mem√≥ria estimada: ${status['memoria_estimada_kb']} KB');
      
      // Mostrar algumas chaves de exemplo
      final chavesSubcategorias = status['subcategorias_chaves_precache'] as List?;
      if (chavesSubcategorias != null && chavesSubcategorias.isNotEmpty) {
        _adicionarResultado('');
        _adicionarResultado('üîë Exemplos de chaves de subcategorias em cache:');
        final exemplos = chavesSubcategorias.take(3);
        for (final chave in exemplos) {
          _adicionarResultado('   ‚Ä¢ $chave');
        }
        if (chavesSubcategorias.length > 3) {
          _adicionarResultado('   ... e mais ${chavesSubcategorias.length - 3} chaves');
        }
      }
      
    } catch (e) {
      _adicionarResultado('‚ùå Erro ao verificar status: $e');
    }
  }

  /// üìù ADICIONAR RESULTADO AO LOG
  void _adicionarResultado(String resultado) {
    final timestamp = DateTime.now().toString().split(' ')[1].split('.')[0];
    final linha = resultado.isEmpty ? '' : '[$timestamp] $resultado';
    
    setState(() {
      _resultados.add(linha);
    });
    
    // Auto-scroll para o final
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // Se h√° itens suficientes, faz scroll para o final
      if (_resultados.length > 10) {
        // Scroll l√≥gico ser√° tratado pelo ListView
      }
    });
  }
}