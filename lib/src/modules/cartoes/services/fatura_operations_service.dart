import 'dart:developer';
import 'package:uuid/uuid.dart';
import '../../../database/local_database.dart';
import '../../../auth_integration.dart';
import '../../../sync/sync_manager.dart';

/// ‚úÖ SERVI√áO EQUIVALENTE AO useFaturaOperations.js
/// Respons√°vel por opera√ß√µes em faturas e transa√ß√µes de cart√£o
class FaturaOperationsService {
  static final FaturaOperationsService _instance = FaturaOperationsService._internal();
  static FaturaOperationsService get instance => _instance;
  FaturaOperationsService._internal();

  final LocalDatabase _localDb = LocalDatabase.instance;
  final AuthIntegration _authIntegration = AuthIntegration.instance;
  final SyncManager _syncManager = SyncManager.instance;
  final Uuid _uuid = const Uuid();

  /// üîß Helper para convers√£o segura de boolean do SQLite
  bool _sqliteBooleanFromInt(dynamic value) {
    if (value == null) return false;
    if (value is bool) return value;
    if (value is int) return value == 1;
    if (value is String) return value == '1' || value.toLowerCase() == 'true';
    return false;
  }

  /// üîß Converte boolean para INTEGER para compatibilidade SQLite
  Map<String, dynamic> _prepareSQLiteData(Map<String, dynamic> data) {
    final result = <String, dynamic>{};
    
    for (final entry in data.entries) {
      final key = entry.key;
      final value = entry.value;
      
      if (value is bool) {
        result[key] = value ? 1 : 0;  // Convert boolean to INTEGER
      } else {
        result[key] = value;
      }
    }
    
    return result;
  }

  /// ‚úÖ FORMATAR DATA PARA PADR√ÉO "Mar/25"
  String _formatarMesAno(String faturaVencimento) {
    try {
      final date = DateTime.parse(faturaVencimento);
      const meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
                     'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
      return '${meses[date.month - 1]}/${date.year.toString().substring(2)}';
    } catch (e) {
      return faturaVencimento; // Fallback para string original
    }
  }

  /// ‚úÖ CRIAR ESTORNO PARA BALANCEAMENTO (Espelho do React)
  Future<Map<String, dynamic>> _criarEstornoBalanceamento({
    required String cartaoId,
    required String faturaVencimento,
    required double valorEstorno,
    required String descricaoEstorno,
    bool jaEfetivado = false,  // ‚úÖ NOVO: par√¢metro para criar j√° efetivado
    String? contaId,           // ‚úÖ NOVO: conta para pagamentos j√° efetivados
  }) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      final estornoId = _uuid.v4();
      
      final agora = DateTime.now().toIso8601String();
      
      final estornoData = {
        'id': estornoId, // ‚úÖ CORRIGIDO: usar ID real
        'usuario_id': userId, // ‚úÖ CORRIGIDO: usar userId real
        'cartao_id': cartaoId,
        'categoria_id': null, // Estorno n√£o tem categoria espec√≠fica
        'subcategoria_id': null,
        'tipo': 'despesa', // ‚úÖ CORRIGIDO: React usa 'despesa'
        'descricao': descricaoEstorno, // ‚úÖ CORRIGIDO: usar descri√ß√£o real
        'valor': -valorEstorno.abs(), // Valor negativo para estorno
        'data': DateTime.now().toIso8601String().split('T')[0], // ‚úÖ CORRIGIDO: campo correto
        'fatura_vencimento': faturaVencimento,
        'efetivado': jaEfetivado, // ‚úÖ NOVO: usar par√¢metro
        'data_efetivacao': jaEfetivado ? agora : null, // ‚úÖ NOVO: data se j√° efetivado
        'conta_id': jaEfetivado ? contaId : null, // ‚úÖ NOVO: conta se j√° efetivado
        'observacoes': 'Estorno autom√°tico para balanceamento do pagamento da fatura',
        'created_at': agora,
        'updated_at': agora,
        // ‚úÖ CAMPOS ADICIONAIS DO REACT:
        'recorrente': false,
        'transferencia': false,
        'conta_destino_id': null,
        'compartilhada_com': null,
        'parcela_atual': null,
        'total_parcelas': null,
        'grupo_parcelamento': null,
        'tags': null,
        'localizacao': null,
        'origem_diagnostico': false,
        'sincronizado': true, // ‚úÖ REACT: usa true
        'valor_parcela': null,
        'numero_parcelas': 1, // ‚úÖ REACT: estorno tem numero_parcelas: 1
        'grupo_recorrencia': null,
        'eh_recorrente': false,
        'tipo_recorrencia': null,
        'numero_recorrencia': null,
        'total_recorrencias': null,
        'data_proxima_recorrencia': null,
        'ajuste_manual': false,
        'motivo_ajuste': null,
        'tipo_receita': null,
        'tipo_despesa': null,
      };

      // ‚úÖ Inserir no SQLite local e sync queue com dados corretos
      final estornoDataSQLite = _prepareSQLiteData(estornoData);
      await _localDb.database?.insert('transacoes', estornoDataSQLite);
      await _localDb.addToSyncQueue('transacoes', estornoId, 'insert', estornoData);

      log('‚úÖ Estorno de balanceamento criado:');
      log('   ID: $estornoId');
      log('   Usuario: $userId'); 
      log('   Tipo: ${estornoData['tipo']}');
      log('   Descri√ß√£o: ${estornoData['descricao']}');
      log('   Valor: R\$ ${valorEstorno.toStringAsFixed(2)}');
      
      return {
        'success': true,
        'estorno_id': estornoId,
        'valor_estorno': valorEstorno,
      };

    } catch (err) {
      log('‚ùå Erro ao criar estorno de balanceamento: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ GARANTIR CATEGORIA "D√çVIDAS" E SUBCATEGORIA "CART√ÉO DE CR√âDITO" (Espelho do React)
  Future<Map<String, dynamic>> _garantirCategoriaDividas() async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      // Buscar categoria "D√≠vidas" existente
      final categoriasResult = await _localDb.database?.query(
        'categorias',
        where: 'usuario_id = ? AND tipo = ? AND (nome LIKE ? OR nome LIKE ?)',
        whereArgs: [userId, 'despesa', '%d√≠vida%', '%divida%'],
      ) ?? [];

      String categoriaId;
      
      if (categoriasResult.isNotEmpty) {
        categoriaId = categoriasResult.first['id'] as String;
        log('‚úÖ Categoria "D√≠vidas" encontrada: $categoriaId');
      } else {
        // Criar categoria "D√≠vidas"
        categoriaId = _uuid.v4();
        
        final categoriaData = {
          'id': categoriaId,
          'usuario_id': userId,
          'nome': 'D√≠vidas',
          'tipo': 'despesa',
          'cor': '#DC2626',
          'icone': 'CreditCard',
          'descricao': 'Categoria para controle de d√≠vidas e financiamentos',
          'created_at': DateTime.now().toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
          };

        final categoriaDataSQLite = _prepareSQLiteData(categoriaData);
        await _localDb.database?.insert('categorias', categoriaDataSQLite);
        await _localDb.addToSyncQueue('categorias', categoriaId, 'insert', categoriaData);
        
        log('‚úÖ Categoria "D√≠vidas" criada: $categoriaId');
      }

      // Buscar subcategoria "Cart√£o de Cr√©dito"
      final subcategoriasResult = await _localDb.database?.query(
        'subcategorias',
        where: 'categoria_id = ? AND (nome LIKE ? OR nome LIKE ?)',
        whereArgs: [categoriaId, '%cart√£o%', '%cartao%'],
      ) ?? [];

      String subcategoriaId;

      if (subcategoriasResult.isNotEmpty) {
        subcategoriaId = subcategoriasResult.first['id'] as String;
        log('‚úÖ Subcategoria "Cart√£o de Cr√©dito" encontrada: $subcategoriaId');
      } else {
        // Criar subcategoria "Cart√£o de Cr√©dito"
        subcategoriaId = _uuid.v4();
        
        final subcategoriaData = {
          'id': subcategoriaId,
          'categoria_id': categoriaId,
          'nome': 'Cart√£o de Cr√©dito',
          'descricao': 'D√≠vidas relacionadas a cart√µes de cr√©dito',
          'created_at': DateTime.now().toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
          };

        final subcategoriaDataSQLite = _prepareSQLiteData(subcategoriaData);
        await _localDb.database?.insert('subcategorias', subcategoriaDataSQLite);
        await _localDb.addToSyncQueue('subcategorias', subcategoriaId, 'insert', subcategoriaData);
        
        log('‚úÖ Subcategoria "Cart√£o de Cr√©dito" criada: $subcategoriaId');
      }

      return {
        'success': true,
        'categoria_id': categoriaId,
        'subcategoria_id': subcategoriaId,
      };

    } catch (err) {
      log('‚ùå Erro ao garantir categoria de d√≠vidas: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ EXCLUIR TRANSA√á√ÉO INDIVIDUAL
  Future<Map<String, dynamic>> excluirTransacao(String transacaoId) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üóëÔ∏è Excluindo transa√ß√£o individual: $transacaoId');

      // Verificar se a transa√ß√£o existe e pertence ao usu√°rio
      final transacaoResult = await _localDb.database?.query(
        'transacoes',
        where: 'id = ? AND usuario_id = ?',
        whereArgs: [transacaoId, userId],
        limit: 1,
      ) ?? [];

      if (transacaoResult.isEmpty) {
        return {'success': false, 'error': 'Transa√ß√£o n√£o encontrada'};
      }

      final transacao = transacaoResult.first;
      final efetivado = _sqliteBooleanFromInt(transacao['efetivado']); // ‚úÖ CORRIGIDO: convers√£o segura

      if (efetivado) {
        return {'success': false, 'error': 'N√£o √© poss√≠vel excluir transa√ß√£o efetivada'};
      }

      // Excluir a transa√ß√£o
      final rowsAffected = await _localDb.database?.delete(
        'transacoes',
        where: 'id = ? AND usuario_id = ?',
        whereArgs: [transacaoId, userId],
      ) ?? 0;

      if (rowsAffected > 0) {
        // Adicionar √† fila de sincroniza√ß√£o
        await _localDb.addToSyncQueue('transacoes', transacaoId, 'delete', {});
        
        log('‚úÖ Transa√ß√£o exclu√≠da com sucesso: $transacaoId');
        return {
          'success': true,
          'message': 'Transa√ß√£o exclu√≠da com sucesso',
          'transacao_id': transacaoId,
        };
      } else {
        return {'success': false, 'error': 'Falha ao excluir transa√ß√£o'};
      }
    } catch (err) {
      log('‚ùå Erro ao excluir transa√ß√£o: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ EXCLUIR PARCELAMENTO COMPLETO
  Future<Map<String, dynamic>> excluirParcelamento(String grupoParcelamento) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üóëÔ∏è Excluindo parcelamento completo: $grupoParcelamento');

      // Buscar todas as parcelas do grupo
      final parcelasResult = await _localDb.database?.query(
        'transacoes',
        where: 'usuario_id = ? AND grupo_parcelamento = ?',
        whereArgs: [userId, grupoParcelamento],
        orderBy: 'parcela_atual ASC',
      ) ?? [];

      if (parcelasResult.isEmpty) {
        return {'success': false, 'error': 'Parcelamento n√£o encontrado'};
      }

      // Verificar se alguma parcela foi efetivada
      final parcelasEfetivadas = parcelasResult.where((p) => _sqliteBooleanFromInt(p['efetivado'])).toList(); // ‚úÖ CORRIGIDO: convers√£o segura
      
      if (parcelasEfetivadas.isNotEmpty) {
        return {
          'success': false, 
          'error': 'N√£o √© poss√≠vel excluir parcelamento com parcelas efetivadas (${parcelasEfetivadas.length} parcelas)'
        };
      }

      // Excluir todas as parcelas
      final rowsAffected = await _localDb.database?.delete(
        'transacoes',
        where: 'usuario_id = ? AND grupo_parcelamento = ?',
        whereArgs: [userId, grupoParcelamento],
      ) ?? 0;

      if (rowsAffected > 0) {
        // Adicionar cada parcela √† fila de sincroniza√ß√£o
        for (final parcela in parcelasResult) {
          await _localDb.addToSyncQueue('transacoes', parcela['id'] as String, 'delete', {});
        }
        
        log('‚úÖ Parcelamento exclu√≠do: $grupoParcelamento ($rowsAffected parcelas)');
        return {
          'success': true,
          'message': 'Parcelamento exclu√≠do com sucesso',
          'grupo_parcelamento': grupoParcelamento,
          'parcelas_excluidas': rowsAffected,
        };
      } else {
        return {'success': false, 'error': 'Falha ao excluir parcelamento'};
      }
    } catch (err) {
      log('‚ùå Erro ao excluir parcelamento: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ EXCLUIR PARCELAS FUTURAS (A PARTIR DA PARCELA ATUAL)
  Future<Map<String, dynamic>> excluirParcelasFuturas(String grupoParcelamento, int parcelaAtual) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üóëÔ∏è Excluindo parcelas futuras do grupo: $grupoParcelamento');
      log('   A partir da parcela: $parcelaAtual');

      // Buscar parcelas futuras (incluindo a atual)
      final parcelasFuturasResult = await _localDb.database?.query(
        'transacoes',
        where: 'usuario_id = ? AND grupo_parcelamento = ? AND parcela_atual >= ?',
        whereArgs: [userId, grupoParcelamento, parcelaAtual],
        orderBy: 'parcela_atual ASC',
      ) ?? [];

      if (parcelasFuturasResult.isEmpty) {
        return {'success': false, 'error': 'Nenhuma parcela futura encontrada'};
      }

      // Verificar se alguma parcela futura foi efetivada
      final parcelasEfetivadas = parcelasFuturasResult.where((p) => _sqliteBooleanFromInt(p['efetivado'])).toList(); // ‚úÖ CORRIGIDO: convers√£o segura
      
      if (parcelasEfetivadas.isNotEmpty) {
        return {
          'success': false, 
          'error': 'N√£o √© poss√≠vel excluir parcelas efetivadas (${parcelasEfetivadas.length} parcelas)'
        };
      }

      // Excluir parcelas futuras
      final rowsAffected = await _localDb.database?.delete(
        'transacoes',
        where: 'usuario_id = ? AND grupo_parcelamento = ? AND parcela_atual >= ?',
        whereArgs: [userId, grupoParcelamento, parcelaAtual],
      ) ?? 0;

      if (rowsAffected > 0) {
        // Adicionar cada parcela √† fila de sincroniza√ß√£o
        for (final parcela in parcelasFuturasResult) {
          await _localDb.addToSyncQueue('transacoes', parcela['id'] as String, 'delete', {});
        }
        
        log('‚úÖ Parcelas futuras exclu√≠das: $grupoParcelamento ($rowsAffected parcelas)');
        return {
          'success': true,
          'message': 'Parcelas futuras exclu√≠das com sucesso',
          'grupo_parcelamento': grupoParcelamento,
          'parcela_inicial': parcelaAtual,
          'parcelas_excluidas': rowsAffected,
        };
      } else {
        return {'success': false, 'error': 'Falha ao excluir parcelas futuras'};
      }
    } catch (err) {
      log('‚ùå Erro ao excluir parcelas futuras: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ PAGAR FATURA (M√©todo gen√©rico - espelho do React)
  Future<Map<String, dynamic>> pagarFatura({
    required String cartaoId,
    required String faturaVencimento,
    required String contaId,
    DateTime? dataPagamento,
  }) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üí≥ Efetivando pagamento da fatura:');
      log('   Cart√£o: $cartaoId');
      log('   Vencimento: $faturaVencimento');
      log('   Conta: $contaId');

      final dataEfetivacao = (dataPagamento ?? DateTime.now()).toIso8601String();

      // Primeiro, buscar as transa√ß√µes que ser√£o afetadas (ANTES de efetivar)
      final transacoesParaEfetivar = await _localDb.database?.query(
        'transacoes',
        where: 'usuario_id = ? AND cartao_id = ? AND fatura_vencimento = ? AND efetivado = ?',
        whereArgs: [userId, cartaoId, faturaVencimento, 0],
      ) ?? [];

      log('üîç Transa√ß√µes encontradas para efetivar: ${transacoesParaEfetivar.length}');

      if (transacoesParaEfetivar.isEmpty) {
        return {
          'success': false,
          'error': 'Nenhuma transa√ß√£o pendente encontrada para efetiva√ß√£o',
        };
      }

      // Efetivar cada transa√ß√£o individualmente para garantir sync
      int transacoesEfetivadas = 0;
      for (final transacao in transacoesParaEfetivar) {
        final updateData = {
          'efetivado': true,
          'data_efetivacao': dataEfetivacao,
          'conta_id': contaId,
          'updated_at': DateTime.now().toIso8601String(),
        };
        final updateDataSQLite = _prepareSQLiteData(updateData);

        final rowsAffected = await _localDb.database?.update(
          'transacoes',
          updateDataSQLite,
          where: 'id = ?',
          whereArgs: [transacao['id']],
        ) ?? 0;

        if (rowsAffected > 0) {
          await _localDb.addToSyncQueue('transacoes', transacao['id'] as String, 'update', {});
          transacoesEfetivadas++;
          log('‚úÖ Transa√ß√£o ${transacao['id']} efetivada e adicionada √† sync queue');
        }
      }

      log('‚úÖ Total de transa√ß√µes efetivadas: $transacoesEfetivadas');

      // üöÄ FOR√áA SYNC IMEDIATO PARA SUPABASE
      log('üîÑ For√ßando sincroniza√ß√£o imediata das transa√ß√µes...');
      try {
        await _syncManager.syncAll();
        log('‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso');
      } catch (syncError) {
        log('‚ö†Ô∏è Erro na sincroniza√ß√£o: $syncError');
      }

      return {
        'success': true,
        'transacoes_afetadas': transacoesEfetivadas,
        'conta_utilizada_id': contaId,
        'message': 'Fatura paga com sucesso. $transacoesEfetivadas transa√ß√µes efetivadas.',
      };

    } catch (err) {
      log('‚ùå Erro ao pagar fatura: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ PAGAR FATURA INTEGRAL
  Future<Map<String, dynamic>> pagarFaturaIntegral({
    required String cartaoId,
    required String faturaVencimento,
    required String contaId,
    DateTime? dataPagamento,
  }) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üí≥ Pagando fatura integral:');
      log('   Cart√£o: $cartaoId');
      log('   Vencimento: $faturaVencimento');
      log('   Conta: $contaId');

      final dataEfetivacao = (dataPagamento ?? DateTime.now()).toIso8601String();

      // Buscar todas as transa√ß√µes da fatura (apenas n√£o pagas, como no React)
      log('üîç DEBUG: Buscando transa√ß√µes para efetivar:');
      log('   userId: $userId');
      log('   cartaoId: $cartaoId');
      log('   faturaVencimento: $faturaVencimento');
      log('   efetivado: 0 (false)');
      
      final transacoesResult = await _localDb.database?.query(
        'transacoes',
        where: 'usuario_id = ? AND cartao_id = ? AND fatura_vencimento = ? AND efetivado = ?',
        whereArgs: [userId, cartaoId, faturaVencimento, 0], // 0 = false em SQLite
      ) ?? [];
      
      log('üîç DEBUG: Query retornou ${transacoesResult.length} transa√ß√µes');
      
      // DEBUG: Buscar TODAS as transa√ß√µes deste cart√£o para comparar
      final todasTransacoes = await _localDb.database?.query(
        'transacoes',
        where: 'usuario_id = ? AND cartao_id = ?',
        whereArgs: [userId, cartaoId],
      ) ?? [];
      
      log('üîç DEBUG: Total de transa√ß√µes do cart√£o: ${todasTransacoes.length}');
      for (int i = 0; i < todasTransacoes.length && i < 5; i++) {
        final t = todasTransacoes[i];
        log('   [$i] ${t['descricao']}: fatura_vencimento=${t['fatura_vencimento']}, efetivado=${t['efetivado']} (${t['efetivado'].runtimeType})');
      }

      log('üîç Transa√ß√µes encontradas na fatura:');
      log('   Total de transa√ß√µes: ${transacoesResult.length}');
      for (int i = 0; i < transacoesResult.length; i++) {
        final t = transacoesResult[i];
        final efetivado = t['efetivado'];
        final valor = t['valor'];
        final descricao = t['descricao'];
        log('   [$i] ID: ${t['id']}, Valor: R\$ ${valor?.toString() ?? 'null'}, Efetivado: $efetivado (${efetivado.runtimeType}), Descri√ß√£o: $descricao');
      }

      if (transacoesResult.isEmpty) {
        return {'success': false, 'error': 'Fatura j√° est√° totalmente paga ou nenhuma transa√ß√£o encontrada'};
      }

      // Efetivar todas as transa√ß√µes da fatura
      int transacoesEfetivadas = 0;
      
      log('üí≥ Iniciando efetiva√ß√£o das transa√ß√µes...');
      for (int i = 0; i < transacoesResult.length; i++) {
        final transacao = transacoesResult[i];
        final efetivado = transacao['efetivado'];
        
        log('   [$i] Processando transa√ß√£o ${transacao['id']}:');
        log('       Valor: R\$ ${transacao['valor']}');
        log('       Efetivado atual: $efetivado (${efetivado.runtimeType})');
        log('       Descri√ß√£o: ${transacao['descricao']}');
        
        final updateData = {
          'efetivado': true, // ‚úÖ CORRIGIDO: boolean como no React
          'data_efetivacao': dataEfetivacao,
          'conta_id': contaId,
          'updated_at': DateTime.now().toIso8601String(),
            };
        final updateDataSQLite = _prepareSQLiteData(updateData);
        
        log('       Dados para update: $updateDataSQLite');
        
        final rowsAffected = await _localDb.database?.update(
          'transacoes',
          updateDataSQLite,
          where: 'id = ?',
          whereArgs: [transacao['id']],
        ) ?? 0;

        log('       Linhas afetadas: $rowsAffected');

        if (rowsAffected > 0) {
          await _localDb.addToSyncQueue('transacoes', transacao['id'] as String, 'update', {});
          transacoesEfetivadas++;
          log('       ‚úÖ Transa√ß√£o efetivada com sucesso');
        } else {
          log('       ‚ùå Falha ao efetivar transa√ß√£o');
        }
      }

      if (transacoesEfetivadas > 0) {
        log('‚úÖ Fatura paga: $transacoesEfetivadas transa√ß√µes efetivadas');
        return {
          'success': true,
          'message': 'Fatura paga com sucesso',
          'cartao_id': cartaoId,
          'fatura_vencimento': faturaVencimento,
          'transacoes_efetivadas': transacoesEfetivadas,
          'conta_id': contaId,
          'data_pagamento': dataEfetivacao,
        };
      } else {
        return {'success': false, 'error': 'Falha ao efetivar transa√ß√µes'};
      }
    } catch (err) {
      log('‚ùå Erro ao pagar fatura: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ PAGAR FATURA PARCIAL - NOVA L√ìGICA (Espelho do React)
  Future<Map<String, dynamic>> pagarFaturaParcial({
    required String cartaoId,
    required String faturaVencimento,
    required String contaId,
    required double valorTotal,     // VALOR TOTAL DA FATURA
    required double valorPago,      // VALOR QUE O USU√ÅRIO QUER PAGAR
    required String faturaDestino,
    DateTime? dataPagamento,
    String? cartaoNome,
    String? contaNome,
  }) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üí≥ üö® PAGAMENTO PARCIAL INICIADO - NOVA L√ìGICA');
      log('   Cart√£o: $cartaoId');
      log('   Vencimento: $faturaVencimento');
      log('   Valor pago: R\$ ${valorPago.toStringAsFixed(2)}');
      log('   Fatura destino: $faturaDestino');

      final dataEfetivacao = (dataPagamento ?? DateTime.now()).toIso8601String();

      // Buscar transa√ß√µes da fatura (compat√≠vel com boolean e int)
      final transacoesResult = await _localDb.database?.query(
        'transacoes',
        where: 'usuario_id = ? AND cartao_id = ? AND fatura_vencimento = ? AND (efetivado = 0 OR efetivado = ?)',
        whereArgs: [userId, cartaoId, faturaVencimento, 0],
      ) ?? [];

      if (transacoesResult.isEmpty) {
        return {'success': false, 'error': 'Nenhuma transa√ß√£o em aberto encontrada'};
      }

      log('üîç DEBUG VALIDA√á√ÉO:');
      log('   valorPago: $valorPago');
      log('   valorTotal: $valorTotal');
      log('   valorPago <= 0: ${valorPago <= 0}');
      log('   valorPago >= valorTotal: ${valorPago >= valorTotal}');
      
      if (valorPago <= 0 || valorPago >= valorTotal) {
        return {'success': false, 'error': 'Valor pago deve ser maior que zero e menor que o total da fatura'};
      }

      final valorRestante = valorTotal - valorPago;
      final mesAnoOriginal = _formatarMesAno(faturaVencimento);
      final dataObj = DateTime.parse(dataEfetivacao);
      final dataFormatada = '${dataObj.day.toString().padLeft(2, '0')}/${dataObj.month.toString().padLeft(2, '0')}/${dataObj.year.toString().substring(2)}';

      log('üí∞ Valores calculados:');
      log('   Total da fatura: R\$ ${valorTotal.toStringAsFixed(2)}');
      log('   Valor pago: R\$ ${valorPago.toStringAsFixed(2)}');
      log('   Valor restante: R\$ ${valorRestante.toStringAsFixed(2)}');

      // ‚úÖ ETAPA 1: PAGAR A FATURA INTEGRAL (que j√° funciona!)
      log('üö® CHAMANDO pagarFaturaIntegral...');
      final resultadoPagamento = await pagarFaturaIntegral(
        cartaoId: cartaoId,
        faturaVencimento: faturaVencimento,
        contaId: contaId,
        dataPagamento: dataPagamento,
      );

      log('üö® RESULTADO pagarFatura: ${resultadoPagamento['success']}');
      if (!resultadoPagamento['success']) {
        throw Exception('Erro ao pagar fatura: ${resultadoPagamento['error']}');
      }

      // ‚úÖ ETAPA 2: Criar cr√©dito no m√™s atual
      final creditoId = _uuid.v4();
      final creditoData = {
        'id': creditoId,
        'usuario_id': userId,
        'cartao_id': cartaoId,
        'categoria_id': null,
        'subcategoria_id': null,
        'tipo': 'receita',
        'descricao': 'Cr√©dito parcial da fatura $mesAnoOriginal',
        'valor': valorRestante,
        'data': dataEfetivacao.split('T')[0],
        'fatura_vencimento': faturaVencimento,
        'efetivado': true,
        'data_efetivacao': dataEfetivacao,
        'conta_id': contaId,
        'created_at': DateTime.now().toIso8601String(),
        'updated_at': DateTime.now().toIso8601String(),
      };

      final creditoDataSQLite = _prepareSQLiteData(creditoData);
      await _localDb.database?.insert('transacoes', creditoDataSQLite);
      await _localDb.addToSyncQueue('transacoes', creditoId, 'insert', creditoData);

      // ‚úÖ ETAPA 3: Criar d√©bito no pr√≥ximo m√™s
      final debitoId = _uuid.v4();
      final debitoData = {
        'id': debitoId,
        'usuario_id': userId,
        'cartao_id': cartaoId,
        'categoria_id': null,
        'subcategoria_id': null,
        'tipo': 'despesa',
        'descricao': 'Saldo pendente da fatura $mesAnoOriginal',
        'valor': valorRestante,
        'data': dataEfetivacao.split('T')[0],
        'fatura_vencimento': faturaDestino,
        'efetivado': false,
        'data_efetivacao': null,
        'conta_id': null,
        'created_at': DateTime.now().toIso8601String(),
        'updated_at': DateTime.now().toIso8601String(),
      };

      final debitoDataSQLite = _prepareSQLiteData(debitoData);
      await _localDb.database?.insert('transacoes', debitoDataSQLite);
      await _localDb.addToSyncQueue('transacoes', debitoId, 'insert', debitoData);

      log('‚úÖ Pagamento parcial conclu√≠do - Nova l√≥gica aplicada');

      return {
        'success': true,
        'message': 'Pagamento parcial realizado com sucesso',
        'cartao_id': cartaoId,
        'fatura_vencimento': faturaVencimento,
        'fatura_destino': faturaDestino,
        'valor_efetivado': valorTotal,
        'valor_pago_conta': valorPago,
        'valor_restante': valorRestante,
        'credito_id': creditoId,
        'debito_id': debitoId,
        'conta_id': contaId,
        'data_pagamento': dataEfetivacao,
      };

    } catch (err) {
      log('‚ùå Erro no pagamento parcial: $err');
      return {'success': false, 'error': err.toString()};
    }
  }


  /// ‚úÖ PAGAR FATURA PARCELADO (Espelho do React)
  Future<Map<String, dynamic>> pagarFaturaParcelado({
    required String cartaoId,
    required String faturaVencimento,
    required String contaId,
    required double valorTotal,
    required int numeroParcelas,
    required double valorParcela,
    DateTime? dataPagamento,
    String? cartaoNome,
    String? contaNome,
  }) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üí≥ NOVA L√ìGICA - Pagamento parcelado:');
      log('   Cart√£o: $cartaoId');
      log('   Vencimento: $faturaVencimento');
      log('   N√∫mero de parcelas: $numeroParcelas');
      log('   Valor da parcela: R\$ ${valorParcela.toStringAsFixed(2)}');

      if (numeroParcelas <= 0 || numeroParcelas > 60) {
        return {'success': false, 'error': 'N√∫mero de parcelas deve ser entre 1 e 60'};
      }

      if (valorParcela <= 0) {
        return {'success': false, 'error': 'Valor da parcela deve ser maior que zero'};
      }

      final dataEfetivacao = (dataPagamento ?? DateTime.now()).toIso8601String();

      final valorTotalParcelado = numeroParcelas * valorParcela;
      
      // ‚úÖ VALIDA√á√ÉO: No React, valor total parcelado n√£o pode ser menor que o valor da fatura
      if (valorTotalParcelado < valorTotal) {
        return {
          'success': false, 
          'error': 'Valor total das parcelas (R\$ ${valorTotalParcelado.toStringAsFixed(2)}) n√£o pode ser menor que o valor da fatura (R\$ ${valorTotal.toStringAsFixed(2)})'
        };
      }
      
      final prejuizoParcelamento = valorTotalParcelado - valorTotal;
      final percentualJuros = (prejuizoParcelamento / valorTotal) * 100;

      log('üí∞ Valores calculados:');
      log('   Total aberto: R\$ ${valorTotal.toStringAsFixed(2)}');
      log('   Total parcelado: R\$ ${valorTotalParcelado.toStringAsFixed(2)}');
      log('   Preju√≠zo: R\$ ${prejuizoParcelamento.toStringAsFixed(2)} (${percentualJuros.toStringAsFixed(1)}%)');

      final mesAnoOriginal = _formatarMesAno(faturaVencimento);
      final dataObj = DateTime.parse(dataEfetivacao);
      final dataFormatada = '${dataObj.day.toString().padLeft(2, '0')}/${dataObj.month.toString().padLeft(2, '0')}/${dataObj.year.toString().substring(2)}';

      // ‚úÖ ETAPA 1: Pagar fatura integral PRIMEIRO (como demandado)
      final resultadoPagamento = await pagarFaturaIntegral(
        cartaoId: cartaoId,
        faturaVencimento: faturaVencimento,
        contaId: contaId,
        dataPagamento: dataPagamento,
      );

      if (!resultadoPagamento['success']) {
        throw Exception('Erro ao efetivar fatura: ${resultadoPagamento['error']}');
      }

      // ‚úÖ ETAPA 2: Criar estorno J√Å EFETIVADO (ap√≥s pagamento)
      final resultadoEstorno = await _criarEstornoBalanceamento(
        cartaoId: cartaoId,
        faturaVencimento: faturaVencimento,
        valorEstorno: valorTotal,
        descricaoEstorno: 'Estorno autom√°tico para balanceamento do pagamento da fatura', // ‚úÖ REACT: texto exato
        jaEfetivado: true,   // ‚úÖ EFETIVADO imediatamente
        contaId: contaId,    // ‚úÖ Com a conta do pagamento
      );

      if (!resultadoEstorno['success']) {
        throw Exception('Erro ao criar estorno: ${resultadoEstorno['error']}');
      }

      // ‚úÖ ETAPA 3: Criar parcelas nas pr√≥ximas faturas
      final categorias = await _garantirCategoriaDividas();
      if (!categorias['success']) {
        throw Exception('Erro ao garantir categorias: ${categorias['error']}');
      }
      
      final DateTime faturaVencimentoDate = DateTime.parse(faturaVencimento);
      final grupoParcelamento = _uuid.v4();
      int parcelasGeradas = 0;

      for (int i = 0; i < numeroParcelas; i++) {
        // ‚úÖ CORRIGIDO: Seguir exatamente a l√≥gica do React
        // React usa: gerarDataFaturaParcela(faturaInicialString, i - 1, diaVencimento) no loop for (i = 1; i <= numero_parcelas; i++)
        // Quando i=0 no Flutter: month + i + 1 = pr√≥ximo m√™s (correto)
        // Quando i=1 no Flutter: month + i + 1 = m√™s seguinte, etc.
        final mesDestino = DateTime(faturaVencimentoDate.year, faturaVencimentoDate.month + i + 1, faturaVencimentoDate.day);
        final faturaDestinoString = mesDestino.toIso8601String().split('T')[0];
        
        final parcelaId = _uuid.v4();
        
        final parcelaData = {
          'id': parcelaId,
          'usuario_id': userId,
          'cartao_id': cartaoId,
          'categoria_id': categorias['categoria_id'],
          'subcategoria_id': categorias['subcategoria_id'],
          'tipo': 'despesa', // ‚úÖ CORRIGIDO: usar mesmo campo do React
          'descricao': 'D√≠vidas relacionadas a cart√µes de cr√©dito', // ‚úÖ IGUAL AO REACT
          'valor': valorParcela,
          'valor_parcela': valorParcela, // ‚úÖ ADICIONADO: campo do React
          'numero_parcelas': numeroParcelas, // ‚úÖ ADICIONADO: campo do React
          'data': dataEfetivacao.split('T')[0], // ‚úÖ CORRIGIDO: campo correto
          'fatura_vencimento': faturaDestinoString,
          'efetivado': false, // ‚úÖ CORRIGIDO: boolean como no React
          'data_efetivacao': null,
          'conta_id': null,
          'grupo_parcelamento': grupoParcelamento,
          'parcela_atual': i + 1,
          'total_parcelas': numeroParcelas,
          'observacoes': 'Parcelamento da fatura original de R\$ ${valorTotal.toStringAsFixed(2)} paga em $dataFormatada. Preju√≠zo: R\$ ${prejuizoParcelamento.toStringAsFixed(2)} (${percentualJuros.toStringAsFixed(1)}%)',
          'created_at': DateTime.now().toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
          // ‚úÖ CAMPOS ADICIONAIS NECESS√ÅRIOS (iguais ao React):
          'recorrente': false,
          'transferencia': false,
          'conta_destino_id': null,
          'compartilhada_com': null,
          'tags': null,
          'localizacao': null,
          'origem_diagnostico': false,
          'sincronizado': true, // ‚úÖ REACT: usa true para parcelas
          'grupo_recorrencia': null,
          'eh_recorrente': false,
          'tipo_recorrencia': null,
          'numero_recorrencia': null,
          'total_recorrencias': null,
          'data_proxima_recorrencia': null,
          'ajuste_manual': false,
          'motivo_ajuste': null,
          'tipo_receita': null,
          'tipo_despesa': null,
          };

        final parcelaDataSQLite = _prepareSQLiteData(parcelaData);
        await _localDb.database?.insert('transacoes', parcelaDataSQLite);
        await _localDb.addToSyncQueue('transacoes', parcelaId, 'insert', parcelaData);
        parcelasGeradas++;
      }

      log('‚úÖ Pagamento parcelado conclu√≠do - Nova l√≥gica aplicada');

      // ‚úÖ ETAPA 4: Agendar sincroniza√ß√£o ap√≥s 10 segundos
      Future.delayed(const Duration(seconds: 10), () async {
        log('‚è∞ Executando sync agendado (10s) ap√≥s pagamento parcelado');
        try {
          await _syncManager.syncAll();
          log('‚úÖ Sync agendado conclu√≠do com sucesso');
        } catch (e) {
          log('‚ö†Ô∏è Erro no sync agendado: $e');
        }
      });

      return {
        'success': true,
        'message': 'Pagamento parcelado realizado com sucesso',
        'cartao_id': cartaoId,
        'fatura_vencimento': faturaVencimento,
        'valor_efetivado': valorTotal,
        'grupo_parcelamento': grupoParcelamento,
        'valor_total_parcelado': valorTotalParcelado,
        'valor_parcela': valorParcela,
        'numero_parcelas': numeroParcelas,
        'prejuizo_parcelamento': prejuizoParcelamento,
        'percentual_juros': percentualJuros,
        'parcelas_geradas': parcelasGeradas,
        'conta_id': contaId,
        'data_pagamento': dataEfetivacao,
      };

    } catch (err) {
      log('‚ùå Erro no pagamento parcelado: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ REABRIR FATURA (DESFAZER PAGAMENTO)
  Future<Map<String, dynamic>> reabrirFatura({
    required String cartaoId,
    required String faturaVencimento,
  }) async {
    log('üöÄ IN√çCIO reabrirFatura - Par√¢metros recebidos:');
    log('   cartaoId: $cartaoId');
    log('   faturaVencimento: $faturaVencimento');
    
    // ‚úÖ Verificar usu√°rio logado e definir userId no escopo da fun√ß√£o
    String? userId;
    try {
      log('üîê Verificando usu√°rio logado...');
      userId = _authIntegration.authService.currentUser?.id;
      log('   userId: $userId');
      
      if (userId == null) {
        log('‚ùå Usu√°rio n√£o logado');
        return {'success': false, 'error': 'Usu√°rio n√£o logado'};
      }
      
      log('‚úÖ Usu√°rio verificado, prosseguindo...');
    } catch (e) {
      log('‚ùå Erro ao verificar usu√°rio: $e');
      return {'success': false, 'error': 'Erro ao verificar usu√°rio: $e'};
    }

    try {
      log('üîì Reabrindo fatura:');
      log('   Cart√£o: $cartaoId');
      log('   Vencimento: $faturaVencimento');

      // ‚úÖ Buscar TODAS as transa√ß√µes efetivadas da fatura (igual ao React)
      // Isso inclui transa√ß√µes normais E parcelas que tenham o mesmo fatura_vencimento
      List<Map<String, Object?>> transacoesResult;
      try {
        log('üîç Executando query para buscar transa√ß√µes efetivadas...');
        transacoesResult = await _localDb.database?.query(
          'transacoes',
          where: 'usuario_id = ? AND cartao_id = ? AND fatura_vencimento = ? AND efetivado = ?',
          whereArgs: [userId, cartaoId, faturaVencimento, 1], // 1 = true em SQLite
        ) ?? [];
        
        log('üîç Encontradas ${transacoesResult.length} transa√ß√µes efetivadas para reabrir na fatura $faturaVencimento');
      } catch (queryError) {
        log('‚ùå Erro na query de busca: $queryError');
        throw queryError;
      }

      if (transacoesResult.isEmpty) {
        return {'success': false, 'error': 'Fatura j√° est√° em aberto ou nenhuma transa√ß√£o encontrada'};
      }

      // Desfazer efetiva√ß√£o de todas as transa√ß√µes da fatura
      int transacoesReabertas = 0;
      
      try {
        for (final transacao in transacoesResult) {
          try {
            final descricao = transacao['descricao'] as String? ?? '';
            final isParcela = transacao['grupo_parcelamento'] != null;
            final valor = (transacao['valor'] as num?)?.toDouble() ?? 0.0;
            final contaAnterior = transacao['conta_id'] as String?;
            
            log('üîì Reabrindo: ${isParcela ? "Parcela" : "Transa√ß√£o"} - $descricao (R\$ $valor)');
            log('   üìã ID: ${transacao['id']}');
            log('   üè¶ Conta anterior: $contaAnterior');
            
            final updateData = {
              'efetivado': false, // ‚úÖ CORRIGIDO: boolean como no React
              'data_efetivacao': null,
              'conta_id': null,
              'updated_at': DateTime.now().toIso8601String(),
                };
            final updateDataSQLite = _prepareSQLiteData(updateData);
            
            log('   üîÑ Dados para update: $updateDataSQLite');
            
            final rowsAffected = await _localDb.database?.update(
              'transacoes',
              updateDataSQLite,
              where: 'id = ?',
              whereArgs: [transacao['id']],
            ) ?? 0;

            log('   üìä Rows affected: $rowsAffected');

            if (rowsAffected > 0) {
              await _localDb.addToSyncQueue('transacoes', transacao['id'] as String, 'update', {});
              transacoesReabertas++;
              log('   ‚úÖ Transa√ß√£o reaberta com sucesso');
            } else {
              log('   ‚ùå Falha ao reabrir transa√ß√£o');
            }
          } catch (transacaoError) {
            log('‚ùå Erro ao processar transa√ß√£o ${transacao['id']}: $transacaoError');
            throw transacaoError;
          }
        }
      } catch (loopError) {
        log('‚ùå Erro no loop de reabertura: $loopError');
        throw loopError;
      }

      if (transacoesReabertas > 0) {
        log('‚úÖ Fatura reaberta: $transacoesReabertas transa√ß√µes/parcelas desefetivadas');
        
        // Agendar sincroniza√ß√£o ap√≥s 10 segundos
        Future.delayed(const Duration(seconds: 10), () async {
          log('‚è∞ Executando sync agendado (10s) ap√≥s reabrir fatura');
          try {
            await _syncManager.syncAll();
            log('‚úÖ Sync agendado conclu√≠do com sucesso');
          } catch (e) {
            log('‚ö†Ô∏è Erro no sync agendado: $e');
          }
        });
        
        return {
          'success': true,
          'message': 'Fatura reaberta com sucesso',
          'cartao_id': cartaoId,
          'fatura_vencimento': faturaVencimento,
          'transacoes_reabertas': transacoesReabertas,
        };
      } else {
        return {'success': false, 'error': 'Falha ao reabrir fatura'};
      }
    } catch (err) {
      log('‚ùå Erro ao reabrir fatura: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ ESTORNAR FATURA PARCIALMENTE
  Future<Map<String, dynamic>> estornarFatura({
    required String cartaoId,
    required String faturaVencimento,
    required List<String> transacaoIds,
  }) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('‚Ü©Ô∏è Estornando transa√ß√µes da fatura:');
      log('   Cart√£o: $cartaoId');
      log('   Vencimento: $faturaVencimento');
      log('   Transa√ß√µes: ${transacaoIds.length}');

      if (transacaoIds.isEmpty) {
        return {'success': false, 'error': 'Nenhuma transa√ß√£o selecionada'};
      }

      // Verificar se as transa√ß√µes existem e est√£o efetivadas
      final transacoesResult = await _localDb.database?.query(
        'transacoes',
        where: '''
          usuario_id = ? 
          AND cartao_id = ? 
          AND fatura_vencimento = ?
          AND id IN (${transacaoIds.map((_) => '?').join(',')})
        ''',
        whereArgs: [userId, cartaoId, faturaVencimento, ...transacaoIds],
      ) ?? [];

      if (transacoesResult.isEmpty) {
        return {'success': false, 'error': 'Nenhuma transa√ß√£o v√°lida encontrada'};
      }

      // Verificar se est√£o efetivadas
      final transacoesEfetivadas = transacoesResult.where((t) => _sqliteBooleanFromInt(t['efetivado'])).toList(); // ‚úÖ CORRIGIDO: convers√£o segura
      if (transacoesEfetivadas.isEmpty) {
        return {'success': false, 'error': 'Nenhuma transa√ß√£o efetivada para estornar'};
      }

      // Estornar transa√ß√µes selecionadas
      int transacoesEstornadas = 0;
      
      for (final transacao in transacoesEfetivadas) {
        final rowsAffected = await _localDb.database?.update(
          'transacoes',
          {
            'efetivado': false, // ‚úÖ CORRIGIDO: boolean como no React
            'data_efetivacao': null,
            'conta_id': null,
            'updated_at': DateTime.now().toIso8601String(),
              },
          where: 'id = ?',
          whereArgs: [transacao['id']],
        ) ?? 0;

        if (rowsAffected > 0) {
          await _localDb.addToSyncQueue('transacoes', transacao['id'] as String, 'update', {});
          transacoesEstornadas++;
        }
      }

      if (transacoesEstornadas > 0) {
        log('‚úÖ Estorno realizado: $transacoesEstornadas transa√ß√µes estornadas');
        return {
          'success': true,
          'message': 'Estorno realizado com sucesso',
          'cartao_id': cartaoId,
          'fatura_vencimento': faturaVencimento,
          'transacoes_estornadas': transacoesEstornadas,
          'total_solicitadas': transacaoIds.length,
        };
      } else {
        return {'success': false, 'error': 'Falha ao estornar transa√ß√µes'};
      }
    } catch (err) {
      log('‚ùå Erro ao estornar fatura: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ ALTERAR LIMITE DE CART√ÉO
  Future<Map<String, dynamic>> alterarLimite({
    required String cartaoId,
    required double novoLimite,
    String? motivo,
  }) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) {
      return {'success': false, 'error': 'Usu√°rio n√£o logado'};
    }

    try {
      log('üìä Alterando limite do cart√£o: $cartaoId');
      log('   Novo limite: R\$ ${novoLimite.toStringAsFixed(2)}');
      log('   Motivo: ${motivo ?? 'N√£o informado'}');

      if (novoLimite <= 0) {
        return {'success': false, 'error': 'Limite deve ser maior que zero'};
      }

      // Verificar se o cart√£o existe
      final cartaoResult = await _localDb.database?.query(
        'cartoes',
        where: 'id = ? AND usuario_id = ?',
        whereArgs: [cartaoId, userId],
        limit: 1,
      ) ?? [];

      if (cartaoResult.isEmpty) {
        return {'success': false, 'error': 'Cart√£o n√£o encontrado'};
      }

      final limiteAnterior = (cartaoResult.first['limite'] as num).toDouble();

      // Atualizar limite
      final rowsAffected = await _localDb.database?.update(
        'cartoes',
        {
          'limite': novoLimite,
          'updated_at': DateTime.now().toIso8601String(),
          },
        where: 'id = ? AND usuario_id = ?',
        whereArgs: [cartaoId, userId],
      ) ?? 0;

      if (rowsAffected > 0) {
        await _localDb.addToSyncQueue('cartoes', cartaoId, 'update', {});
        
        log('‚úÖ Limite alterado com sucesso');
        return {
          'success': true,
          'message': 'Limite alterado com sucesso',
          'cartao_id': cartaoId,
          'limite_anterior': limiteAnterior,
          'limite_novo': novoLimite,
          'motivo': motivo,
        };
      } else {
        return {'success': false, 'error': 'Falha ao alterar limite'};
      }
    } catch (err) {
      log('‚ùå Erro ao alterar limite: $err');
      return {'success': false, 'error': err.toString()};
    }
  }

  /// ‚úÖ BUSCAR HIST√ìRICO DE ALTERA√á√ïES
  Future<List<Map<String, dynamic>>> buscarHistoricoAlteracoes(String cartaoId) async {
    final userId = _authIntegration.authService.currentUser?.id;
    if (userId == null) return [];

    try {
      // Em uma implementa√ß√£o real, voc√™ teria uma tabela de hist√≥rico
      // Por enquanto, vamos simular com logs das sync_queue
      final result = await _localDb.database?.query(
        'sync_queue',
        where: 'table_name = ? AND record_id = ? AND operation = ?',
        whereArgs: ['cartoes', cartaoId, 'update'],
        orderBy: 'created_at DESC',
        limit: 50,
      ) ?? [];

      return result.map((row) => {
        'id': row['id'],
        'data': row['created_at'],
        'operacao': 'Atualiza√ß√£o',
        'detalhes': 'Limite ou dados do cart√£o alterados',
      }).toList();
    } catch (err) {
      log('‚ùå Erro ao buscar hist√≥rico: $err');
      return [];
    }
  }

  /// ‚úÖ VALIDAR OPERA√á√ÉO
  bool _validarOperacao(String cartaoId, String faturaVencimento) {
    if (cartaoId.isEmpty || faturaVencimento.isEmpty) {
      return false;
    }

    try {
      DateTime.parse(faturaVencimento);
      return true;
    } catch (e) {
      return false;
    }
  }
}